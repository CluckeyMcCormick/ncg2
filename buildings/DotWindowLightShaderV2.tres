[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;

render_mode depth_draw_alpha_prepass;

// Color of the building
uniform vec4 BuildingColor : hint_color;
// Red Dot replacement color and light mixture scalar
uniform vec4 RedDotColor : hint_color;
uniform float RedDotLightMix : hint_range(0, 1);
// Green Dot
uniform vec4 GreenDotColor : hint_color;
uniform float GreenDotLightMix : hint_range(0, 1);
// Blue Dot
uniform vec4 BlueDotColor : hint_color;
uniform float BlueDotLightMix : hint_range(0, 1);
// The actual texture we'll be using to create the building
uniform sampler2D DotTexture;

// Sometimes, with window textures that have gradual gradients, we'll see weird
// color \"rings\" around the windows/dots. This is particularly noticeable when
// you remove alpha-ing out the building. The solution is to round the texture's
// alpha to one-or-zero - however, this results in a jagged look. Ergo, we leave
// it as a uniform. 
uniform float window_border_correction : hint_range(0, 1);

// The Color Black - it's important to remember that, for the LIGHT SHADER,
// black isn't so much a color as merely the absence of light.
const vec3 BLACK = vec3(0.0, 0.0, 0.0);

void fragment(){
    vec4 window_texture = texture(DotTexture, UV.xy);
    float win_r = window_texture.r;
    float win_g = window_texture.g;
    float win_b = window_texture.b;
    float win_a = window_texture.a;
    
    // Round the alpha according to our correction factor.
    win_a = mix(win_a, round(win_a), window_border_correction);
    
    // Instead of using if-else checks to replace the red-green-blue of the
    // window texture with our designated replacements, we'll use this mix
    // monstrosity. The red, green, and blue of the texture will be used as the
    // mix scalars. As long as the colors are pure, this will replace the dots
    // appropriately with no issues!
    vec3 color_mix = mix(mix(mix(
                // Mix between black and whatever our red color is, using the
                // \"redness\" as a scalar.
                vec3(0, 0, 0), RedDotColor.rgb, win_r
            // Mix between the above result and the green color, using the
            // \"greeness\" as a scalar
            ), GreenDotColor.rgb, win_g
        // Mix between the above result and the blue color, using the \"blueness\"
        // as a scalar
        ), BlueDotColor.rgb, win_b
    );

    // This is the same exact thing as above, but with alpha instead of RGB.
    float alpha_mix = mix(mix(mix(
                0.0, RedDotColor.a, win_r
            ), GreenDotColor.a, win_g
        ), BlueDotColor.a, win_b
    );
    
    // Just pass the building color and alpha straight through
    ALBEDO = mix(BuildingColor.rgb, color_mix, win_a);
    ALPHA = mix(BuildingColor.a, alpha_mix, win_a);
}

void light(){
    // I'll be honest, I very barely understand this algorithm. It was based on
    // a SpatialMaterial converted down into ShaderMaterial, and copied without
    // understanding. Some parts I can speak for more definitively than others;
    // but I at least made an attempt on trying to explain all of them.

    // We have two lights that we can work with - SPECULAR and DIFFUSE.
    // Now, as far as I can observe, the specular and the diffuse just sorta
    // nicely blend into each other automatically. Not sure what's going on
    // there or if that's correct, but that's what I've observed. So, since we
    // always want to blend in with the building colors, we'll just use the
    // Albedo (the texture color) as the specular and lay the diffuse on top.
    SPECULAR_LIGHT = ALBEDO;

    // Okay, grab the window texture and the texture's RGBA values - just like
    // we did before.
    vec4 window_texture = texture(DotTexture, UV.xy);
    float win_r = window_texture.r;
    float win_g = window_texture.g;
    float win_b = window_texture.b;
    float win_a = window_texture.a;

    // Round the alpha according to our correction factor.
    win_a = mix(win_a, round(win_a), window_border_correction);

    // LIGHT is actually the light vector - literally the projection of the
    // light in space. The normal is the vector perpendicular to the surface
    // we're hitting - taking the dot product of the two produces... something.
    // I honestly have no idea what it is. The light dot or something? It's a
    // float value and it's a scalar. Couldn't tell you anything elese.
    float clamped_dot = clamp( dot(NORMAL, LIGHT), 0.00000, 1.00000);

    // Okay, now take that dot product and use it to scale the attenuation. Then
    // take the length of that vector and clamp it - this is now a one-to-zero
    // measure of how powerful the light is. So we can use this to mix with any
    // existing albedo and diffuse light.
    float light_scalar = clamp(
        length(ATTENUATION * clamped_dot), 0.00000, 1.00000
    );
    
    // Just a quick note - we do need to clamp those values above. I noticed if
    // you don't clamp then, you start to see some weird stuff. In particular,
    // lights begin to  \"peek\" through surfaces and begin to render on the wrong
    // sides.

    // Remember that color monster from the fragment shader? This is the exact
    // same thing, but now applied to light mix variables. It is, in effect, an
    // if-elif-else statement done with math - just so long as the texture
    // colors are always one of [ (255, 0, 0) or (0, 255, 0) or (0, 0, 255) ].
    float dot_mix_factor = mix(mix(mix(
                0.0, RedDotLightMix, win_r
            ), GreenDotLightMix, win_g
        ), BlueDotLightMix, win_b
    );
    
    // First, mix in the DIFFUSE_LIGHT and LIGHT_COLOR using the light scalar
    // that we put together earlier.
    vec3 diffuse_mix = mix(DIFFUSE_LIGHT, LIGHT_COLOR, light_scalar);
    // Now, we're going to use the mix factor of the designated color (one of
    // RedDotColor, GreenDotColor, BlueDotColor) to temper that mixed color
    // possibly down to black - which, because this is the light shader, is
    // merely the absence of light not the color black. The sum effect is that
    // each color's mix factor is effectively that window's \"mixability\" with
    // the light sources. A mix factor of 1 means the window renders on top of
    // the light, and a mix factor of 0 means the window colors is completely
    // mixed with the light. This allows us to do \"dim\" windows that get
    // overwritten by city lights.
    vec3 dot_post_mix = mix(diffuse_mix, BLACK, dot_mix_factor);
    
    // Now mix according to the window texture's alpha. Since the alpha is only
    // 0 when we're not over a window, this effectively operates as an if-else
    // statement done with math.
    DIFFUSE_LIGHT = mix(
        diffuse_mix,
        dot_post_mix,
        win_a
    );
}"
