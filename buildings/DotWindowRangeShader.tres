[gd_resource type="Shader" format=2]

[resource]
code = "
// (c) 2022 Nicolas McCormick Fredrickson
// This code is licensed under the MIT license (see LICENSE.txt for details)

shader_type spatial;

render_mode unshaded, depth_draw_alpha_prepass;

// Color of the building
uniform vec4 BuildingColor : hint_color;

// Red Dot replacement color and light mixture scalar
uniform vec4 RedDotColor : hint_color;
uniform float RedDotLightMix : hint_range(0, 1);
// Green Dot
uniform vec4 GreenDotColor : hint_color;
uniform float GreenDotLightMix : hint_range(0, 1);
// Blue Dot
uniform vec4 BlueDotColor : hint_color;
uniform float BlueDotLightMix : hint_range(0, 1);
// The actual texture we'll be using to create the building
uniform sampler2D DotTexture;
// Sometimes, with window textures that have gradual gradients, we'll see weird
// color \"rings\" around the windows/dots. This is particularly noticeable when
// you remove alpha-ing out the building. The solution is to round the texture's
// alpha to one-or-zero - however, this results in a jagged look. Ergo, we leave
// it as a uniform. 
uniform float window_border_correction : hint_range(0, 1);

// The texture we'll be using to determine the range of each light
uniform sampler2D RangeTexture : hint_black;

// The colors we'll use for each of the lights.
uniform vec4 L1Color : hint_color;
uniform vec2 L1Shift = vec2(0, 0);
uniform vec2 L1TextureScale = vec2(1, 1);
uniform float L1Scalar = 1;
uniform float L1Coefficient : hint_range(0.0, 1.0, 1) = 1;

uniform vec4 L2Color : hint_color;
uniform vec2 L2Shift = vec2(0, 0);
uniform vec2 L2TextureScale = vec2(1, 1);
uniform float L2Scalar = 1;
uniform float L2Coefficient : hint_range(0.0, 1.0, 1) = 1;

uniform vec4 L3Color : hint_color;
uniform vec2 L3Shift = vec2(0, 0);
uniform vec2 L3TextureScale = vec2(1, 1);
uniform float L3Scalar = 1;
uniform float L3Coefficient : hint_range(0.0, 1.0, 1) = 1;

uniform vec4 L4Color : hint_color;
uniform vec2 L4Shift = vec2(0, 0);
uniform vec2 L4TextureScale = vec2(1, 1);
uniform float L4Scalar = 1;
uniform float L4Coefficient : hint_range(0.0, 1.0, 1) = 1;

// We consider lights to \"start\" at a certain fixed height - below this point,
// there is no attenutation
uniform float base_height : hint_range(0.0, 100.0, 0.001) = 0;
// Sometimes the attenuation just doesn't happen as quickly as it wants to - so
// we use this coefficient to scale up the distance, thus directly scaling up
// (or down!) the distance.
uniform float distance_coefficient : hint_range(0.0, 100.0) = 1;

// Okay, so the range texture has values between 0 and 1. What is the base
// range? I.e. what's the range value at 0?
uniform float range_base = 1;
// If the range texture is 1, what's the range that we add? This makes it so the
// possible range is (range_base, range_base + range_variance).
uniform float range_variance = 0;

// What's the base luminance/power value of all the lights?
const float base_power = 1.0;

// The attenuation factor is calculated using three coefficients - the constant
// attenuation, the linear attenuation, and the quadratic attenuation. You can
// play with the linear and quadratic as you please - higher numbers means more
// (or rather, quicker) attenuation.
const float constant_attenuation = 1.0;
uniform float linear_attenuation : hint_range(0.0, 100.0) = 1.0;
uniform float quadratic_attenuation : hint_range(0.0, 100.0) = 1.0;

float calculate_attenuation(float radius, float dist) {
    // If radius is 0, we'd divide by 0. Return 0 and back out.
    if( radius == 0.0 )
        return 0.0;
    
    float af = constant_attenuation;
    af += linear_attenuation * ( 2.0 / radius ) * dist;
    af += quadratic_attenuation * ( 2.0 / pow(radius, 2.0) ) * pow(dist, 2.0); 
    
    return 1.0 / af;    
}

void fragment() {
    // Grab the RGBA from the window dot texture
    vec4 window_texture = texture(DotTexture, UV.xy);
    // Devolve the vector into individual colors
    float win_r = window_texture.r;
    float win_g = window_texture.g;
    float win_b = window_texture.b;
    float win_a = window_texture.a;
    
    //
    // Step 1: Determine window color, alpha, and mix factors for this fragment
    //    
    // Round the alpha according to our correction factor.
    win_a = mix(win_a, round(win_a), window_border_correction);
    
    // Instead of using if-else checks to replace the red-green-blue of the
    // window texture with our designated replacements, we'll use this mix
    // monstrosity. The red, green, and blue of the texture will be used as the
    // mix scalars. As long as the colors are pure, this will replace the dots
    // appropriately with no issues!
    vec3 window_color = mix(mix(mix(
                // Mix between black and whatever our red color is, using the
                // \"redness\" as a scalar.
                vec3(0, 0, 0), RedDotColor.rgb, win_r
            // Mix between the above result and the green color, using the
            // \"greeness\" as a scalar
            ), GreenDotColor.rgb, win_g
        // Mix between the above result and the blue color, using the \"blueness\"
        // as a scalar
        ), BlueDotColor.rgb, win_b
    );

    // This is the same exact thing as above, but with alpha instead of RGB.
    float window_alpha = mix(mix(mix(
                0.0, RedDotColor.a, win_r
            ), GreenDotColor.a, win_g
        ), BlueDotColor.a, win_b
    );
    
    // The same thing once again, but now with our window light mixture factor.
    float window_light_factor = mix(mix(mix(
                0.0, RedDotLightMix, win_r
            ), GreenDotLightMix, win_g
        ), BlueDotLightMix, win_b
    );
    
    //
    // Step 2: Calculate power values
    //
    // Use the scalars and coefficients to calculate the power for each light
    float p1 = base_power * L1Scalar * L1Coefficient;
    float p2 = base_power * L2Scalar * L2Coefficient;
    float p3 = base_power * L3Scalar * L3Coefficient;
    float p4 = base_power * L4Scalar * L4Coefficient;
    
    //
    // Step 3: Calculate Distance
    //
    // Get the position of this fragment coordinate in local model space. To do
    // that, we take the VERTEX built-in (which is the coordinate in view space)
    // and multiply it by the CAMERA_MATRIX, which is the view space to
    // world space transform matrix. Now we're in world space, and we want to
    // be in model space. Unfortunately all we have is the WORLD_MATRIX, which
    // converts from model space to world space. BUT, if we invert that, that
    // gives us world space to model space, so we can multiply that by our world
    // vertex to get the vertex in model space.
    vec4 model_vertex = inverse(WORLD_MATRIX) * (CAMERA_MATRIX * vec4(VERTEX, 1.0));
    
    // Now we need to measure our \"distance\" from the lights, which have a y
    // position at \"base_height\". Multiply that by our distance coefficient to
    // control how this distance scales
    float dist = max(model_vertex.y - base_height, 0) * distance_coefficient;
    
    //
    // Step 4: Calculate light color, ALBEDO, and ALPHA
    //
    // Get the range values
    float r1 = texture(
        RangeTexture,
        (UV2.xy * L1TextureScale) + (L1Shift * L1TextureScale) 
    ).r;
    float r2 = texture(
        RangeTexture,
        (UV2.xy * L2TextureScale) + (L2Shift * L2TextureScale) 
    ).r;
    float r3 = texture(
        RangeTexture,
        (UV2.xy * L3TextureScale) + (L3Shift * L3TextureScale) 
    ).r;
    float r4 = texture(
        RangeTexture,
        (UV2.xy * L4TextureScale) + (L4Shift * L4TextureScale) 
    ).r;
    
    r1 = (r1 * range_variance) + range_base;
    r2 = (r2 * range_variance) + range_base;
    r3 = (r3 * range_variance) + range_base;
    r4 = (r4 * range_variance) + range_base;
    
    vec3 light_color = L1Color.rgb * p1 * calculate_attenuation(r1, dist);
    light_color += L2Color.rgb * p2 * calculate_attenuation(r2, dist);
    light_color += L3Color.rgb * p3 * calculate_attenuation(r3, dist);
    light_color += L4Color.rgb * p4 * calculate_attenuation(r4, dist);
    
    //
    //
    //
    
    // Alright, so our final ALBEDO is a mix between...
    ALBEDO = mix(
        // The building color, lighted appropriately
        BuildingColor.rgb + light_color,
        // The window color, lighted appropriately according to the light mix
        // factor
        window_color + (light_color * window_light_factor),
        // The mix between these two colors is determined by the window
        // texture's alpha, where 1 = window and 0 = building.
        win_a
    );
    // The ALPHA is just a mix between the building's alpha and the window
    // color's alpha, as determined by the window texture's alpha
    ALPHA = mix(BuildingColor.a, window_alpha, win_a);
}"
