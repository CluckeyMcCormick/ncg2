[gd_resource type="Shader" format=2]

[resource]
code = "
// (c) 2022 Nicolas McCormick Fredrickson
// This code is licensed under the MIT license (see LICENSE.txt for details)

shader_type spatial;

render_mode unshaded, depth_draw_alpha_prepass;

// Color of the building
uniform vec4 BuildingColor : hint_color;

// Red Dot replacement color and light mixture scalar
uniform vec4 RedDotColor : hint_color;
uniform float RedDotLightMix : hint_range(0, 1);
// Green Dot
uniform vec4 GreenDotColor : hint_color;
uniform float GreenDotLightMix : hint_range(0, 1);
// Blue Dot
uniform vec4 BlueDotColor : hint_color;
uniform float BlueDotLightMix : hint_range(0, 1);
// The actual texture we'll be using to create the building
uniform sampler2D DotTexture;
// Sometimes, with window textures that have gradual gradients, we'll see weird
// color \"rings\" around the windows/dots. This is particularly noticeable when
// you remove alpha-ing out the building. The solution is to round the texture's
// alpha to one-or-zero - however, this results in a jagged look. Ergo, we leave
// it as a uniform. 
uniform float window_border_correction : hint_range(0, 1);

uniform float light_shift_x = .25;
uniform float light_shift_y = 0;
uniform float light_shift_z = .25;

// The colors we'll use for each of the lights.
uniform vec4 L1Color : hint_color;
uniform float L1Scalar = 1;
uniform float L1Coefficient : hint_range(0.0, 1.0, 1) = 1;

uniform vec4 L2Color : hint_color;
uniform float L2Scalar = 1;
uniform float L2Coefficient : hint_range(0.0, 1.0, 1) = 1;

uniform vec4 L3Color : hint_color;
uniform float L3Scalar = 1;
uniform float L3Coefficient : hint_range(0.0, 1.0, 1) = 1;

uniform vec4 L4Color : hint_color;
uniform float L4Scalar = 1;
uniform float L4Coefficient : hint_range(0.0, 1.0, 1) = 1;

// Sometimes the attenuation just doesn't happen as quickly as it wants to - so
// we use this coefficient to scale up the distance, thus directly scaling up
// (or down!) the distance.
uniform float distance_coefficient : hint_range(0.0, 100.0) = 64;

// What's the base luminance/power value of all the lights?
const float base_power = 1.0;

// Okay so this shader emulates us having lights by placing lights at the four
// \"corners\" of the mesh. Except there's no real way to designate the mesh's
// corner. So here's what we're going to do: guess. We're just gonna guess.
// Maybe it'll be a good guess? Who knows. If we take the absolute values of x
// and z for every vertex, then that SHOUUUULD be the positive version of each
// vertex. And from that, we can calculate the other versions. Probably. 
varying vec3 pos_corner;

// Okay, so the NORMAL in the fragment shader is kind of... weird. I think it's
// in view space, but I couldn't get it into the model view space - not even
// using my inverse matrix technique. So I decided to just capture the surface
// normal in the vertex shader and pass it to the fragment shader. Lazy,
// incorrect - functional!
varying vec3 actual_normal;

// This function calculates an attenuation factor (between 0 and 1) for a light
// with a given range of r and a point of a given distance away, d.
float calculate_attenuation(float r, float d) {
    float dist_min = r;
    float dist_max = 0.0;
    
    float atten_min = 0.0;
    float atten_max = 1.0;
    
    float OldRange = ( dist_max - dist_min );
    float NewRange = (atten_max - atten_min);
    return (((d - dist_min) * NewRange) / OldRange) + atten_min;   
}

// This function takes in a packed light int and returns the numeric group ID.
int extract_light_group(int packed_light) {
    return packed_light & 0x00003;
}

// This function takes in a packed light int and returns the float range value.
float extract_light_range(int packed_light) {
    return float((packed_light & 0x001FC) >> 2);
}

// This function takes in a packed light int and returns the vec3 position. Note
// this value will NOT be quadrant adjusted.
vec3 extract_light_pos(int packed_light) {
    vec3 ret_vec = vec3(0.0, 0.0, 0.0);
    ret_vec.x = float((packed_light & 0x03E00) >> 9);
    ret_vec.z = float((packed_light & 0x7C000) >> 14);
    return ret_vec;
}

void vertex() {
    // Calculate the \"positive corner\" version of this vertex - the corner where
    // x and z are positive
    pos_corner = vec3(abs(VERTEX.x), 0.0, abs(VERTEX.z) );
    // Add our shifts into this pure-positive corner light.
    pos_corner += vec3( light_shift_x, light_shift_y, light_shift_z );
    // Grab the normal now so we can carry it over to the fragment shader
    actual_normal = normalize(NORMAL);
}

void fragment() {
    // Grab the RGBA from the window dot texture
    vec4 window_texture = texture(DotTexture, UV.xy);
    // Devolve the vector into individual colors
    float win_r = window_texture.r;
    float win_g = window_texture.g;
    float win_b = window_texture.b;
    float win_a = window_texture.a;
    
    //
    // Step 1: Determine window color, alpha, and mix factors for this fragment
    //    
    // Round the alpha according to our correction factor.
    win_a = mix(win_a, round(win_a), window_border_correction);
    
    // Instead of using if-else checks to replace the red-green-blue of the
    // window texture with our designated replacements, we'll use this mix
    // monstrosity. The red, green, and blue of the texture will be used as the
    // mix scalars. As long as the colors are pure, this will replace the dots
    // appropriately with no issues!
    vec3 window_color = mix(mix(mix(
                // Mix between black and whatever our red color is, using the
                // \"redness\" as a scalar.
                vec3(0, 0, 0), RedDotColor.rgb, win_r
            // Mix between the above result and the green color, using the
            // \"greeness\" as a scalar
            ), GreenDotColor.rgb, win_g
        // Mix between the above result and the blue color, using the \"blueness\"
        // as a scalar
        ), BlueDotColor.rgb, win_b
    );

    // This is the same exact thing as above, but with alpha instead of RGB.
    float window_alpha = mix(mix(mix(
                0.0, RedDotColor.a, win_r
            ), GreenDotColor.a, win_g
        ), BlueDotColor.a, win_b
    );
    
    // The same thing once again, but now with our window light mixture factor.
    float window_light_factor = mix(mix(mix(
                0.0, RedDotLightMix, win_r
            ), GreenDotLightMix, win_g
        ), BlueDotLightMix, win_b
    );
    
    //
    // Step 2: Calculate power values for each light group
    //
    // Use the scalars and coefficients to calculate the power for each light
    float p1 = base_power * L1Scalar * L1Coefficient;
    float p2 = base_power * L2Scalar * L2Coefficient;
    float p3 = base_power * L3Scalar * L3Coefficient;
    float p4 = base_power * L4Scalar * L4Coefficient;
    
    //
    // Step 3: Unpack light information
    //
    int se_int = int(COLOR.r * 1000000.0);
    int ne_int = int(COLOR.g * 1000000.0);
    int nw_int = int(COLOR.b * 1000000.0);
    int sw_int = int(COLOR.a * 1000000.0);
    
    vec4 se_color;
    float se_range;
    vec3 se_pos;
    float se_power;
    
    vec4 ne_color;
    float ne_range;
    vec3 ne_pos;
    float ne_power;
    
    vec4 nw_color;
    float nw_range;
    vec3 nw_pos;
    float nw_power;
    
    vec4 sw_color;
    float sw_range;
    vec3 sw_pos;
    float sw_power;
    
    // From each int, extract the group. Set the color and powers appropriately.
    switch( extract_light_group(se_int) ){
        case 0: se_color = L1Color; se_power = p1; break;
        case 1: se_color = L2Color; se_power = p2; break;
        case 2: se_color = L3Color; se_power = p3; break;
        case 3: se_color = L4Color; se_power = p4; break;
    }
    switch( extract_light_group(ne_int) ){
        case 0: ne_color = L1Color; ne_power = p1; break;
        case 1: ne_color = L2Color; ne_power = p2; break;
        case 2: ne_color = L3Color; ne_power = p3; break;
        case 3: ne_color = L4Color; ne_power = p4; break;
    }
    switch( extract_light_group(nw_int) ){
        case 0: nw_color = L1Color; nw_power = p1; break;
        case 1: nw_color = L2Color; nw_power = p2; break;
        case 2: nw_color = L3Color; nw_power = p3; break;
        case 3: nw_color = L4Color; nw_power = p4; break;
    }
    switch( extract_light_group(sw_int) ){
        case 0: sw_color = L1Color; sw_power = p1; break;
        case 1: sw_color = L2Color; sw_power = p2; break;
        case 2: sw_color = L3Color; sw_power = p3; break;
        case 3: sw_color = L4Color; sw_power = p4; break;
    }
    
    // Extract the range of the lights
    se_range = extract_light_range(se_int);
    ne_range = extract_light_range(ne_int);
    nw_range = extract_light_range(nw_int);
    sw_range = extract_light_range(sw_int);

    // Extract the positions of the lights
    se_pos = extract_light_pos(se_int);
    ne_pos = extract_light_pos(ne_int);
    nw_pos = extract_light_pos(nw_int);
    sw_pos = extract_light_pos(sw_int);
    
    // Adjust the positions of the lights for their quadrants
    se_pos.x =  abs(se_pos.x); se_pos.z =  abs(se_pos.z);
    ne_pos.x =  abs(ne_pos.x); ne_pos.z = -abs(ne_pos.z);
    nw_pos.x = -abs(nw_pos.x); nw_pos.z = -abs(nw_pos.z);
    sw_pos.x = -abs(sw_pos.x); sw_pos.z =  abs(sw_pos.z);
    
    //
    // Step 3: Calculate distance from each light
    //
    // Get the position of this fragment coordinate in local model space. To do
    // that, we take the VERTEX built-in (which is the coordinate in view space)
    // and multiply it by the CAMERA_MATRIX, which is the view space to
    // world space transform matrix. Now we're in world space, and we want to
    // be in model space. Unfortunately all we have is the WORLD_MATRIX, which
    // converts from model space to world space. BUT, if we invert that, that
    // gives us world space to model space, so we can multiply that by our world
    // vertex to get the vertex in model space.
    vec3 frag_pos = (
        inverse(WORLD_MATRIX) * (CAMERA_MATRIX * vec4(VERTEX, 1.0))
    ).xyz;
    
    // Now we need to measure our distance from each lights, which have a y
    // position at \"base_height\". Multiply that by our distance coefficient to
    // control how this distance scales
    float se_d = distance(se_pos, frag_pos) * distance_coefficient;
    float ne_d = distance(ne_pos, frag_pos) * distance_coefficient;
    float nw_d = distance(nw_pos, frag_pos) * distance_coefficient;
    float sw_d = distance(sw_pos, frag_pos) * distance_coefficient;
    
    //
    // Step 4: Calculate the theta using the normal and the light positions
    //
    // Calculate the unitized direction
    vec3 se_dir = normalize(se_pos - frag_pos);
    vec3 ne_dir = normalize(ne_pos - frag_pos);
    vec3 nw_dir = normalize(nw_pos - frag_pos);
    vec3 sw_dir = normalize(sw_pos - frag_pos);
    
    // The \"theta\" is the angle at which the light is hitting a particular
    // surface. If we take the dot product of the normal and the light direction
    // unit vector, then the resulting vaue will be 0 if the theta is 0 degrees
    // or 1 if it is 90 degrees. This allows us to effectively scale the power
    // of a light depending on it's theta to the normal.
    float se_t = max( dot(actual_normal, se_dir), 0.0 );
    float ne_t = max( dot(actual_normal, ne_dir), 0.0 );
    float nw_t = max( dot(actual_normal, nw_dir), 0.0 );
    float sw_t = max( dot(actual_normal, sw_dir), 0.0 );
    
    // NOTE: Step 4 might not have been a lot, but it took me a long time to
    // work out. Shout out to Joey de Vries and his Learn Open GL website,
    // because I would NOT have figured this out without his article:
    // https://learnopengl.com/Lighting/Basic-Lighting
    
    //
    // Step 5: Calculate light color
    //
    vec3 se_c = se_color.rgb * se_power * se_t * calculate_attenuation(se_range, se_d);
    vec3 ne_c = ne_color.rgb * ne_power * ne_t * calculate_attenuation(ne_range, ne_d);
    vec3 nw_c = nw_color.rgb * nw_power * nw_t * calculate_attenuation(nw_range, nw_d);
    vec3 sw_c = sw_color.rgb * sw_power * sw_t * calculate_attenuation(sw_range, sw_d);
    
    // Clamp the colors down (otherwise they might disapear!)
    se_c = clamp(se_c, 0.0, 1.0);
    ne_c = clamp(ne_c, 0.0, 1.0);
    nw_c = clamp(nw_c, 0.0, 1.0);
    sw_c = clamp(sw_c, 0.0, 1.0);
    
    //
    // Step 6: Calculate ALBEDO and ALPHA
    //
    
    // Alright, so our final ALBEDO is a mix between...
    ALBEDO = mix(
        // The building color, lighted appropriately
        BuildingColor.rgb + se_c + ne_c + nw_c + sw_c,
        // The window color, lighted appropriately according to the light mix
        // factor
        window_color + ((se_c + ne_c + nw_c + sw_c) * window_light_factor),
        // The mix between these two colors is determined by the window
        // texture's alpha, where 1 = window and 0 = building.
        win_a
    );
    // The ALPHA is just a mix between the building's alpha and the window
    // color's alpha, as determined by the window texture's alpha
    ALPHA = mix(BuildingColor.a, window_alpha, win_a);
}"
