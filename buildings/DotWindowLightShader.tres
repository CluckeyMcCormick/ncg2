[gd_resource type="VisualShader" load_steps=31 format=2]

[sub_resource type="VisualShaderNodeVectorScalarMix" id=1]

[sub_resource type="VisualShaderNodeVectorScalarMix" id=2]

[sub_resource type="VisualShaderNodeVectorScalarMix" id=3]

[sub_resource type="VisualShaderNodeScalarInterp" id=4]

[sub_resource type="VisualShaderNodeScalarFunc" id=5]
function = 14

[sub_resource type="VisualShaderNodeTextureUniform" id=6]
uniform_name = "DotTexture"

[sub_resource type="VisualShaderNodeColorUniform" id=7]
output_port_for_preview = 0
uniform_name = "BuildingColor"

[sub_resource type="VisualShaderNodeColorUniform" id=8]
uniform_name = "RedDotColor"

[sub_resource type="VisualShaderNodeColorUniform" id=9]
uniform_name = "GreenDotColor"

[sub_resource type="VisualShaderNodeColorUniform" id=10]
uniform_name = "BlueDotColor"

[sub_resource type="VisualShaderNodeVectorDecompose" id=11]

[sub_resource type="VisualShaderNodeVectorScalarMix" id=12]

[sub_resource type="VisualShaderNodeScalarClamp" id=19]

[sub_resource type="VisualShaderNodeInput" id=21]
input_name = "light_color"

[sub_resource type="VisualShaderNodeInput" id=22]
input_name = "albedo"

[sub_resource type="VisualShaderNodeVectorScalarMix" id=23]

[sub_resource type="VisualShaderNodeVectorLen" id=24]

[sub_resource type="VisualShaderNodeVectorLen" id=25]

[sub_resource type="VisualShaderNodeInput" id=26]
input_name = "diffuse"

[sub_resource type="VisualShaderNodeIf" id=27]

[sub_resource type="VisualShaderNodeTextureUniform" id=28]
uniform_name = "DotTextureLight"

[sub_resource type="VisualShaderNodeVectorScalarMix" id=29]

[sub_resource type="VisualShaderNodeInput" id=13]
input_name = "normal"

[sub_resource type="VisualShaderNodeInput" id=30]
input_name = "albedo"

[sub_resource type="VisualShaderNodeInput" id=14]
input_name = "light"

[sub_resource type="VisualShaderNodeDotProduct" id=15]

[sub_resource type="VisualShaderNodeVectorClamp" id=16]

[sub_resource type="VisualShaderNodeVectorOp" id=17]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=18]
input_name = "attenuation"

[sub_resource type="VisualShaderNodeVectorLen" id=20]

[resource]
code = "shader_type spatial;
render_mode depth_draw_alpha_prepass, diffuse_toon, specular_schlick_ggx;

uniform vec4 BuildingColor : hint_color;
uniform vec4 RedDotColor : hint_color;
uniform sampler2D DotTexture;
uniform vec4 BlueDotColor : hint_color;
uniform vec4 GreenDotColor : hint_color;
uniform sampler2D DotTextureLight;



void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:3
	vec3 n_out3p0 = BuildingColor.rgb;
	float n_out3p1 = BuildingColor.a;

// ColorUniform:5
	vec3 n_out5p0 = RedDotColor.rgb;
	float n_out5p1 = RedDotColor.a;

// TextureUniform:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = texture(DotTexture, UV.xy);
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// VectorDecompose:8
	float n_out8p0 = n_out2p0.x;
	float n_out8p1 = n_out2p0.y;
	float n_out8p2 = n_out2p0.z;

// VectorScalarMix:9
	vec3 n_in9p0 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out9p0 = mix(n_in9p0, n_out5p0, n_out8p0);

// ColorUniform:7
	vec3 n_out7p0 = BlueDotColor.rgb;
	float n_out7p1 = BlueDotColor.a;

// VectorScalarMix:10
	vec3 n_out10p0 = mix(n_out9p0, n_out7p0, n_out8p1);

// ColorUniform:6
	vec3 n_out6p0 = GreenDotColor.rgb;
	float n_out6p1 = GreenDotColor.a;

// VectorScalarMix:11
	vec3 n_out11p0 = mix(n_out10p0, n_out6p0, n_out8p2);

// VectorScalarMix:12
	vec3 n_out12p0 = mix(n_out3p0, n_out11p0, n_out2p1);

// ScalarFunc:14
	float n_out14p0 = floor(n_out2p1);

// ScalarMix:13
	float n_out13p0 = mix(n_out3p1, n_out2p1, n_out14p0);

// Output:0
	ALBEDO = n_out12p0;
	ALPHA = n_out13p0;

}

void light() {
// Input:12
	vec3 n_out12p0 = ALBEDO;

// Input:11
	vec3 n_out11p0 = LIGHT_COLOR;

// Input:2
	vec3 n_out2p0 = NORMAL;

// Input:3
	vec3 n_out3p0 = LIGHT;

// DotProduct:4
	float n_out4p0 = dot(n_out2p0, n_out3p0);

// VectorClamp:5
	vec3 n_in5p1 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in5p2 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out5p0 = clamp(vec3(n_out4p0), n_in5p1, n_in5p2);

// Input:8
	vec3 n_out8p0 = ATTENUATION;

// VectorOp:7
	vec3 n_out7p0 = n_out5p0 * n_out8p0;

// VectorLen:9
	float n_out9p0 = length(n_out7p0);

// ScalarClamp:10
	float n_in10p1 = 0.00000;
	float n_in10p2 = 1.00000;
	float n_out10p0 = clamp(n_out9p0, n_in10p1, n_in10p2);

// VectorScalarMix:13
	vec3 n_out13p0 = mix(n_out12p0, n_out11p0, n_out10p0);

// VectorLen:14
	float n_out14p0 = length(n_out13p0);

// Input:16
	vec3 n_out16p0 = DIFFUSE_LIGHT;

// VectorLen:15
	float n_out15p0 = length(n_out16p0);

// If:17
	float n_in17p2 = 0.00001;
	vec3 n_out17p0;
	if(abs(n_out14p0 - n_out15p0) < n_in17p2)
	{
		n_out17p0 = n_out16p0;
	}
	else if(n_out14p0 < n_out15p0)
	{
		n_out17p0 = n_out16p0;
	}
	else
	{
		n_out17p0 = n_out13p0;
	}

// Input:20
	vec3 n_out20p0 = ALBEDO;

// TextureUniform:18
	vec3 n_out18p0;
	float n_out18p1;
	{
		vec4 n_tex_read = texture(DotTextureLight, UV.xy);
		n_out18p0 = n_tex_read.rgb;
		n_out18p1 = n_tex_read.a;
	}

// VectorScalarMix:19
	vec3 n_out19p0 = mix(n_out17p0, n_out20p0, n_out18p1);

// Output:0
	DIFFUSE_LIGHT = n_out19p0;

}
"
graph_offset = Vector2( 905.96, 58.0152 )
modes/depth_draw = 3
modes/diffuse = 4
nodes/fragment/0/position = Vector2( 900, 280 )
nodes/fragment/2/node = SubResource( 6 )
nodes/fragment/2/position = Vector2( -300, 160 )
nodes/fragment/3/node = SubResource( 7 )
nodes/fragment/3/position = Vector2( 180, 420 )
nodes/fragment/5/node = SubResource( 8 )
nodes/fragment/5/position = Vector2( 0, -140 )
nodes/fragment/6/node = SubResource( 9 )
nodes/fragment/6/position = Vector2( 0, 60 )
nodes/fragment/7/node = SubResource( 10 )
nodes/fragment/7/position = Vector2( 0, -40 )
nodes/fragment/8/node = SubResource( 11 )
nodes/fragment/8/position = Vector2( -20, 160 )
nodes/fragment/9/node = SubResource( 12 )
nodes/fragment/9/position = Vector2( 240, -80 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 440, 20 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 640, 100 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( 640, 240 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( 640, 340 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( 160, 360 )
nodes/fragment/connections = PoolIntArray( 10, 0, 11, 0, 9, 0, 10, 0, 8, 0, 9, 2, 8, 1, 10, 2, 8, 2, 11, 2, 5, 0, 9, 1, 7, 0, 10, 1, 6, 0, 11, 1, 12, 0, 0, 0, 11, 0, 12, 1, 3, 0, 12, 0, 3, 1, 13, 0, 13, 0, 0, 1, 14, 0, 13, 2, 2, 1, 13, 1, 2, 1, 12, 2, 2, 1, 14, 0, 2, 0, 8, 0 )
nodes/light/0/position = Vector2( 2940, 160 )
nodes/light/2/node = SubResource( 13 )
nodes/light/2/position = Vector2( 580, 80 )
nodes/light/3/node = SubResource( 14 )
nodes/light/3/position = Vector2( 600, 160 )
nodes/light/4/node = SubResource( 15 )
nodes/light/4/position = Vector2( 780, 120 )
nodes/light/5/node = SubResource( 16 )
nodes/light/5/position = Vector2( 960, 120 )
nodes/light/7/node = SubResource( 17 )
nodes/light/7/position = Vector2( 1180, 120 )
nodes/light/8/node = SubResource( 18 )
nodes/light/8/position = Vector2( 940, 240 )
nodes/light/9/node = SubResource( 20 )
nodes/light/9/position = Vector2( 1380, 140 )
nodes/light/10/node = SubResource( 19 )
nodes/light/10/position = Vector2( 1600, 140 )
nodes/light/11/node = SubResource( 21 )
nodes/light/11/position = Vector2( 1580, 60 )
nodes/light/12/node = SubResource( 22 )
nodes/light/12/position = Vector2( 1600, -20 )
nodes/light/13/node = SubResource( 23 )
nodes/light/13/position = Vector2( 1840, 60 )
nodes/light/14/node = SubResource( 24 )
nodes/light/14/position = Vector2( 2100, 0 )
nodes/light/15/node = SubResource( 25 )
nodes/light/15/position = Vector2( 2080, 140 )
nodes/light/16/node = SubResource( 26 )
nodes/light/16/position = Vector2( 1880, 240 )
nodes/light/17/node = SubResource( 27 )
nodes/light/17/position = Vector2( 2409.6, 49.4 )
nodes/light/18/node = SubResource( 28 )
nodes/light/18/position = Vector2( 2420, 380 )
nodes/light/19/node = SubResource( 29 )
nodes/light/19/position = Vector2( 2700, 160 )
nodes/light/20/node = SubResource( 30 )
nodes/light/20/position = Vector2( 2420, 280 )
nodes/light/connections = PoolIntArray( 2, 0, 4, 0, 3, 0, 4, 1, 4, 0, 5, 0, 5, 0, 7, 0, 8, 0, 7, 1, 7, 0, 9, 0, 9, 0, 10, 0, 10, 0, 13, 2, 11, 0, 13, 1, 12, 0, 13, 0, 16, 0, 15, 0, 13, 0, 14, 0, 14, 0, 17, 0, 15, 0, 17, 1, 16, 0, 17, 3, 16, 0, 17, 5, 13, 0, 17, 4, 18, 1, 19, 2, 20, 0, 19, 1, 17, 0, 19, 0, 19, 0, 0, 0 )
