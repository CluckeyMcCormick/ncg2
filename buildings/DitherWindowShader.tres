[gd_resource type="VisualShader" load_steps=25 format=2]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "attenuation"

[sub_resource type="VisualShaderNodeVectorClamp" id=2]

[sub_resource type="VisualShaderNodeVectorOp" id=3]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "light"

[sub_resource type="VisualShaderNodeVectorLen" id=5]

[sub_resource type="VisualShaderNodeVectorCompose" id=6]
default_input_values = [ 0, 0.0, 1, 0.5, 2, 0.0 ]

[sub_resource type="VisualShaderNodeTextureUniform" id=7]
uniform_name = "ramp"

[sub_resource type="VisualShaderNodeScalarClamp" id=8]
default_input_values = [ 0, 0.0, 1, 0.01, 2, 0.99 ]

[sub_resource type="VisualShaderNodeTextureUniform" id=9]
uniform_name = "dark_texture"

[sub_resource type="VisualShaderNodeTextureUniform" id=10]
uniform_name = "mid_texture"

[sub_resource type="VisualShaderNodeTextureUniform" id=11]
uniform_name = "light_texture"

[sub_resource type="VisualShaderNodeExpression" id=12]
size = Vector2( 593, 280 )
expression = "composite = dark_texture_rgb;
composite = mix(composite, mid_texture_rgb, ramp_rgb.g);
composite = mix(composite, light_texture_rgb, ramp_rgb.r);"

[sub_resource type="VisualShaderNodeVectorScalarMix" id=13]

[sub_resource type="VisualShaderNodeColorUniform" id=14]
uniform_name = "dark_color"

[sub_resource type="VisualShaderNodeInput" id=15]
input_name = "light_color"

[sub_resource type="VisualShaderNodeColorUniform" id=16]
uniform_name = "window_color"

[sub_resource type="VisualShaderNodeInput" id=17]
input_name = "diffuse"

[sub_resource type="VisualShaderNodeTextureUniform" id=18]
uniform_name = "TextureUniform"

[sub_resource type="VisualShaderNodeVectorScalarMix" id=19]

[sub_resource type="VisualShaderNodeVectorLen" id=20]

[sub_resource type="VisualShaderNodeIf" id=21]

[sub_resource type="VisualShaderNodeVectorLen" id=22]

[sub_resource type="VisualShaderNodeDotProduct" id=23]

[sub_resource type="VisualShaderNodeInput" id=24]
input_name = "normal"

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx, world_vertex_coords;

uniform vec4 dark_color : hint_color;
uniform sampler2D dark_texture;
uniform sampler2D mid_texture;
uniform sampler2D light_texture;
uniform sampler2D ramp;
uniform vec4 window_color : hint_color;
uniform sampler2D TextureUniform;



void vertex() {
// Output:0

}

void fragment() {
// Output:0

}

void light() {
// ColorUniform:57
	vec3 n_out57p0 = dark_color.rgb;
	float n_out57p1 = dark_color.a;

// Input:58
	vec3 n_out58p0 = LIGHT_COLOR;

// TextureUniform:37
	vec3 n_out37p0;
	float n_out37p1;
	{
		vec4 n_tex_read = texture(dark_texture, UV.xy);
		n_out37p0 = n_tex_read.rgb;
		n_out37p1 = n_tex_read.a;
	}

// TextureUniform:38
	vec3 n_out38p0;
	float n_out38p1;
	{
		vec4 n_tex_read = texture(mid_texture, UV.xy);
		n_out38p0 = n_tex_read.rgb;
		n_out38p1 = n_tex_read.a;
	}

// TextureUniform:39
	vec3 n_out39p0;
	float n_out39p1;
	{
		vec4 n_tex_read = texture(light_texture, UV.xy);
		n_out39p0 = n_tex_read.rgb;
		n_out39p1 = n_tex_read.a;
	}

// Input:8
	vec3 n_out8p0 = NORMAL;

// Input:2
	vec3 n_out2p0 = LIGHT;

// DotProduct:7
	float n_out7p0 = dot(n_out8p0, n_out2p0);

// VectorClamp:12
	vec3 n_in12p1 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in12p2 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out12p0 = clamp(vec3(n_out7p0), n_in12p1, n_in12p2);

// Input:10
	vec3 n_out10p0 = ATTENUATION;

// VectorOp:13
	vec3 n_out13p0 = n_out12p0 * n_out10p0;

// VectorLen:26
	float n_out26p0 = length(n_out13p0);

// ScalarClamp:32
	float n_in32p1 = 0.01000;
	float n_in32p2 = 0.99000;
	float n_out32p0 = clamp(n_out26p0, n_in32p1, n_in32p2);

// VectorCompose:27
	float n_in27p1 = 0.50000;
	float n_in27p2 = 0.00000;
	vec3 n_out27p0 = vec3(n_out32p0, n_in27p1, n_in27p2);

// TextureUniform:28
	vec3 n_out28p0;
	float n_out28p1;
	{
		vec4 n_tex_read = texture(ramp, n_out27p0.xy);
		n_out28p0 = n_tex_read.rgb;
		n_out28p1 = n_tex_read.a;
	}

// Expression:55
	vec3 n_out55p0;
	n_out55p0 = vec3(0.0, 0.0, 0.0);
	{
		n_out55p0 = n_out37p0;
		n_out55p0 = mix(n_out55p0, n_out38p0, n_out28p0.g);
		n_out55p0 = mix(n_out55p0, n_out39p0, n_out28p0.r);
	}

// VectorScalarMix:56
	vec3 n_out56p0 = mix(n_out57p0, n_out58p0, dot(n_out55p0, vec3(0.333333, 0.333333, 0.333333)));

// VectorLen:67
	float n_out67p0 = length(n_out56p0);

// Input:63
	vec3 n_out63p0 = DIFFUSE_LIGHT;

// VectorLen:69
	float n_out69p0 = length(n_out63p0);

// If:68
	float n_in68p2 = 0.00001;
	vec3 n_out68p0;
	if(abs(n_out67p0 - n_out69p0) < n_in68p2)
	{
		n_out68p0 = n_out63p0;
	}
	else if(n_out67p0 < n_out69p0)
	{
		n_out68p0 = n_out63p0;
	}
	else
	{
		n_out68p0 = n_out56p0;
	}

// ColorUniform:62
	vec3 n_out62p0 = window_color.rgb;
	float n_out62p1 = window_color.a;

// TextureUniform:65
	vec3 n_out65p0;
	float n_out65p1;
	{
		vec4 n_tex_read = texture(TextureUniform, UV.xy);
		n_out65p0 = n_tex_read.rgb;
		n_out65p1 = n_tex_read.a;
	}

// VectorScalarMix:66
	vec3 n_out66p0 = mix(n_out68p0, n_out62p0, n_out65p1);

// Output:0
	DIFFUSE_LIGHT = n_out66p0;

}
"
graph_offset = Vector2( 1775.33, -648 )
flags/world_vertex_coords = true
nodes/fragment/0/position = Vector2( 860, 140 )
nodes/light/0/position = Vector2( 2720, -540 )
nodes/light/2/node = SubResource( 4 )
nodes/light/2/position = Vector2( -600, -80 )
nodes/light/7/node = SubResource( 23 )
nodes/light/7/position = Vector2( -400, -120 )
nodes/light/8/node = SubResource( 24 )
nodes/light/8/position = Vector2( -620, -140 )
nodes/light/10/node = SubResource( 1 )
nodes/light/10/position = Vector2( -240, 0 )
nodes/light/12/node = SubResource( 2 )
nodes/light/12/position = Vector2( -220, -120 )
nodes/light/13/node = SubResource( 3 )
nodes/light/13/position = Vector2( 80, -140 )
nodes/light/26/node = SubResource( 5 )
nodes/light/26/position = Vector2( 280, -120 )
nodes/light/27/node = SubResource( 6 )
nodes/light/27/position = Vector2( 680, -120 )
nodes/light/28/node = SubResource( 7 )
nodes/light/28/position = Vector2( 920, -200 )
nodes/light/32/node = SubResource( 8 )
nodes/light/32/position = Vector2( 440, -120 )
nodes/light/37/node = SubResource( 9 )
nodes/light/37/position = Vector2( 960, -540 )
nodes/light/38/node = SubResource( 10 )
nodes/light/38/position = Vector2( 780, -460 )
nodes/light/39/node = SubResource( 11 )
nodes/light/39/position = Vector2( 600, -380 )
nodes/light/55/node = SubResource( 12 )
nodes/light/55/position = Vector2( 1200, -380 )
nodes/light/55/size = Vector2( 593, 280 )
nodes/light/55/input_ports = "0,1,dark_texture_rgb;1,1,mid_texture_rgb;2,1,light_texture_rgb;3,1,ramp_rgb;"
nodes/light/55/output_ports = "0,1,composite;"
nodes/light/55/expression = "composite = dark_texture_rgb;
composite = mix(composite, mid_texture_rgb, ramp_rgb.g);
composite = mix(composite, light_texture_rgb, ramp_rgb.r);"
nodes/light/56/node = SubResource( 13 )
nodes/light/56/position = Vector2( 1940, -460 )
nodes/light/57/node = SubResource( 14 )
nodes/light/57/position = Vector2( 1640, -600 )
nodes/light/58/node = SubResource( 15 )
nodes/light/58/position = Vector2( 1620, -460 )
nodes/light/62/node = SubResource( 16 )
nodes/light/62/position = Vector2( 2260, -540 )
nodes/light/63/node = SubResource( 17 )
nodes/light/63/position = Vector2( 1960, -340 )
nodes/light/65/node = SubResource( 18 )
nodes/light/65/position = Vector2( 2260, -720 )
nodes/light/66/node = SubResource( 19 )
nodes/light/66/position = Vector2( 2500, -540 )
nodes/light/67/node = SubResource( 20 )
nodes/light/67/position = Vector2( 2160, -440 )
nodes/light/68/node = SubResource( 21 )
nodes/light/68/position = Vector2( 2360, -380 )
nodes/light/69/node = SubResource( 22 )
nodes/light/69/position = Vector2( 2160, -340 )
nodes/light/connections = PoolIntArray( 8, 0, 7, 0, 7, 0, 12, 0, 2, 0, 7, 1, 10, 0, 13, 1, 12, 0, 13, 0, 8, 0, 7, 0, 7, 0, 12, 0, 2, 0, 7, 1, 10, 0, 13, 1, 12, 0, 13, 0, 13, 0, 26, 0, 27, 0, 28, 0, 26, 0, 32, 0, 32, 0, 27, 0, 28, 0, 55, 3, 38, 0, 55, 1, 37, 0, 55, 0, 39, 0, 55, 2, 55, 0, 56, 2, 57, 0, 56, 0, 58, 0, 56, 1, 62, 0, 66, 1, 65, 1, 66, 2, 66, 0, 0, 0, 56, 0, 67, 0, 63, 0, 69, 0, 67, 0, 68, 0, 69, 0, 68, 1, 56, 0, 68, 4, 63, 0, 68, 3, 63, 0, 68, 5, 68, 0, 66, 0 )
