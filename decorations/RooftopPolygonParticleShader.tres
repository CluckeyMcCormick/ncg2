[gd_resource type="Shader" format=2]

[resource]
code = "
// (c) 2022 Nicolas McCormick Fredrickson
// This code is licensed under the MIT license (see LICENSE.txt for details)

shader_type particles;
uniform float scale;
uniform float scale_random;
uniform vec3 emission_box_extents;
uniform bool y_only_scaling;

float rand_from_seed(inout uint seed) {
    int k;
    int s = int(seed);
    if (s == 0)
    s = 305420679;
    k = s / 127773;
    s = 16807 * (s - k * 127773) - 2836 * k;
    if (s < 0)
        s += 2147483647;
    seed = uint(s);
    return float(seed % uint(65536)) / 65535.0;
}

float rand_from_seed_m1_p1(inout uint seed) {
    return rand_from_seed(seed) * 2.0 - 1.0;
}

uint hash(uint x) {
    x = ((x >> uint(16)) ^ x) * uint(73244475);
    x = ((x >> uint(16)) ^ x) * uint(73244475);
    x = (x >> uint(16)) ^ x;
    return x;
}

void vertex(){
    uint base_number = NUMBER;// / uint(trail_divisor);
    uint alt_seed = hash(base_number + uint(1) + RANDOM_SEED);
    float scale_rand = rand_from_seed(alt_seed);
    
    TRANSFORM[3].xyz = vec3(
        rand_from_seed(alt_seed) * 2.0 - 1.0, // X
        rand_from_seed(alt_seed) * 2.0 - 1.0, // Y
        rand_from_seed(alt_seed) * 2.0 - 1.0  // Z
    ) * emission_box_extents;
    
    TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
    
    // Do scale stuff
    float tex_scale = 1.0;
    TRANSFORM[0].xyz = normalize(TRANSFORM[0].xyz);
    TRANSFORM[1].xyz = normalize(TRANSFORM[1].xyz);
    TRANSFORM[2].xyz = normalize(TRANSFORM[2].xyz);
    float base_scale = tex_scale * mix(scale, 1.0, scale_random * scale_rand);
    if (base_scale < 0.000001) {
        base_scale = 0.000001;
    }
    if(y_only_scaling){
        TRANSFORM[1].xyz *= base_scale;
    }
    else {
        TRANSFORM[0].xyz *= base_scale;
        TRANSFORM[1].xyz *= base_scale;
        TRANSFORM[2].xyz *= base_scale;
    }
    
    CUSTOM.xyz = EMISSION_TRANSFORM[3].xyz;
}
"
